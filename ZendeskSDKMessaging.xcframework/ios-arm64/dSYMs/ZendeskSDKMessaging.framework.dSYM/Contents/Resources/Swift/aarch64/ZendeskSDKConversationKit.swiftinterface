// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ZendeskSDKConversationKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import CoreTelephony
import Foundation
import MobileCoreServices
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
@_exported import ZendeskSDKConversationKit
import ZendeskSDKCoreUtilities
import ZendeskSDKFayeClient
import ZendeskSDKHTTPClient
import ZendeskSDKLogger
import ZendeskSDKStorage
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
final public class FormResponseMessageContent : Swift.Codable, ZendeskSDKConversationKit.Content, Swift.Equatable, Swift.Hashable {
  final public var type: ZendeskSDKConversationKit.MessageType {
    get
  }
  final public let quotedMessageId: Swift.String
  final public var fields: [any ZendeskSDKConversationKit.Field] {
    get
  }
  final public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  final public let formFields: [ZendeskSDKConversationKit.FormField]
  public init(quotedMessageId: Swift.String, formFields: [ZendeskSDKConversationKit.FormField], metadata: [Swift.String : Swift.AnyHashable]? = nil)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.FormResponseMessageContent, rhs: ZendeskSDKConversationKit.FormResponseMessageContent) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class LinkAction : Swift.Codable, ZendeskSDKConversationKit.MessageAction, Swift.Equatable, Swift.Hashable {
  final public let id: Swift.String
  final public var type: ZendeskSDKConversationKit.ActionType {
    get
  }
  final public let text: Swift.String
  final public let uri: Swift.String
  final public let `default`: Swift.Bool
  final public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  public init(id: Swift.String, text: Swift.String, uri: Swift.String, default: Swift.Bool, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.LinkAction, rhs: ZendeskSDKConversationKit.LinkAction) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
final public class Conversation : Swift.Codable, Swift.Equatable {
  final public let id: Swift.String
  final public let type: ZendeskSDKConversationKit.ConversationType
  final public let isDefault: Swift.Bool
  final public let displayName: Swift.String?
  final public let displayDescription: Swift.String?
  final public let iconURL: Swift.String?
  final public let business: [Swift.String]
  final public let businessLastRead: Foundation.Date?
  final public let lastUpdatedAt: Foundation.Date?
  final public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  final public let participants: [ZendeskSDKConversationKit.Participant]
  final public let messages: [ZendeskSDKConversationKit.Message]
  final public let hasPrevious: Swift.Bool
  final public let myself: ZendeskSDKConversationKit.Participant?
  final public let activity: ZendeskSDKConversationKit.Activity?
  final public let status: ZendeskSDKConversationKit.ConversationStatus
  final public let createdAt: Foundation.Date?
  final public let routingStatus: ZendeskSDKConversationKit.ConversationRoutingStatus
  public init(id: Swift.String, type: ZendeskSDKConversationKit.ConversationType, isDefault: Swift.Bool, displayName: Swift.String? = nil, displayDescription: Swift.String? = nil, iconURL: Swift.String? = nil, business: [Swift.String] = [], businessLastRead: Foundation.Date? = nil, lastUpdatedAt: Foundation.Date? = nil, metadata: [Swift.String : Swift.AnyHashable]? = nil, participants: [ZendeskSDKConversationKit.Participant] = [], messages: [ZendeskSDKConversationKit.Message] = [], hasPrevious: Swift.Bool = false, myself: ZendeskSDKConversationKit.Participant?, activity: ZendeskSDKConversationKit.Activity? = nil, status: ZendeskSDKConversationKit.ConversationStatus = .unknown, createdAt: Foundation.Date? = nil, routingStatus: ZendeskSDKConversationKit.ConversationRoutingStatus = .unknown)
  public static func == (lhs: ZendeskSDKConversationKit.Conversation, rhs: ZendeskSDKConversationKit.Conversation) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension ZendeskSDKConversationKit.Conversation {
  final public var mostRecentUpdateTime: Foundation.Date {
    get
  }
}
public enum ConversationType : Swift.Int, Swift.Codable {
  case personal
  case group
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum FormField : Swift.Equatable, Swift.Hashable {
  case text(ZendeskSDKConversationKit.TextFormField)
  case email(ZendeskSDKConversationKit.EmailFormField)
  case select(ZendeskSDKConversationKit.SelectFormField)
  public var id: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var label: Swift.String {
    get
  }
  public var type: ZendeskSDKConversationKit.FieldType {
    get
  }
  public var value: Swift.String {
    get
  }
  public static func == (a: ZendeskSDKConversationKit.FormField, b: ZendeskSDKConversationKit.FormField) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ZendeskSDKConversationKit.FormField : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
final public class UnsupportedMessageContent : Swift.Codable, ZendeskSDKConversationKit.Content, Swift.Equatable, Swift.Hashable {
  final public var type: ZendeskSDKConversationKit.MessageType {
    get
  }
  final public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  public init(metadata: [Swift.String : Swift.AnyHashable]? = nil)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.UnsupportedMessageContent, rhs: ZendeskSDKConversationKit.UnsupportedMessageContent) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class PostbackAction : Swift.Codable, ZendeskSDKConversationKit.MessageAction, Swift.Equatable, Swift.Hashable {
  final public let id: Swift.String
  final public var type: ZendeskSDKConversationKit.ActionType {
    get
  }
  final public let text: Swift.String
  final public let payload: Swift.String
  final public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  public init(id: Swift.String, text: Swift.String, payload: Swift.String, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.PostbackAction, rhs: ZendeskSDKConversationKit.PostbackAction) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
final public class CarouselMessageContent : Swift.Codable, ZendeskSDKConversationKit.Content, Swift.Equatable, Swift.Hashable {
  final public var type: ZendeskSDKConversationKit.MessageType {
    get
  }
  final public var messageItems: [ZendeskSDKConversationKit.MessageActionItem]
  final public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  public init(messageItems: [ZendeskSDKConversationKit.MessageActionItem], metadata: [Swift.String : Swift.AnyHashable]? = nil)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.CarouselMessageContent, rhs: ZendeskSDKConversationKit.CarouselMessageContent) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class RealtimeSettings : Swift.Codable {
  final public var baseURL: Swift.String
  final public var retryInterval: Foundation.TimeInterval
  final public var maxConnectionAttempts: Swift.Int
  final public var connectionDelay: Foundation.TimeInterval
  final public var enabled: Swift.Bool
  public static func == (lhs: ZendeskSDKConversationKit.RealtimeSettings, rhs: ZendeskSDKConversationKit.RealtimeSettings) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ConversationKitBuilder {
  func build(with settingsParameters: ZendeskSDKConversationKit.SettingsParameters, callbackQueue: Dispatch.DispatchQueue) -> any ZendeskSDKConversationKit.ConversationKit
  func setup(authDelegate: any ZendeskSDKConversationKit.AuthenticationDelegate)
}
final public class DefaultConversationKitBuilder : ZendeskSDKConversationKit.ConversationKitBuilder {
  public init()
  final public func build(with settingsParameters: ZendeskSDKConversationKit.SettingsParameters, callbackQueue: Dispatch.DispatchQueue = .main) -> any ZendeskSDKConversationKit.ConversationKit
  final public func setup(authDelegate: any ZendeskSDKConversationKit.AuthenticationDelegate)
  @objc deinit
}
public enum Subrole : Swift.Int, Swift.Codable {
  public typealias RawValue = Swift.String
  case AI
  public var rawValue: ZendeskSDKConversationKit.Subrole.RawValue {
    get
  }
  public init?(rawValue: ZendeskSDKConversationKit.Subrole.RawValue)
}
@_hasMissingDesignatedInitializers final public class LocationRequestAction : Swift.Codable, ZendeskSDKConversationKit.MessageAction, Swift.Equatable, Swift.Hashable {
  final public let id: Swift.String
  final public var type: ZendeskSDKConversationKit.ActionType {
    get
  }
  final public let text: Swift.String
  final public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  public init(id: Swift.String, text: Swift.String, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.LocationRequestAction, rhs: ZendeskSDKConversationKit.LocationRequestAction) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProactiveMessageStatus : Swift.Int {
  case notificationWillDisplay
  case notificationHasBeenDisplayed
  case notificationHasBeenClicked
  case conversationHasBeenRepliedTo
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class ConversationList : Swift.Codable, Swift.Equatable {
  final public let conversations: [ZendeskSDKConversationKit.Conversation]
  final public let hasMore: Swift.Bool
  public init(conversations: [ZendeskSDKConversationKit.Conversation], hasMore: Swift.Bool = false)
  public static func == (lhs: ZendeskSDKConversationKit.ConversationList, rhs: ZendeskSDKConversationKit.ConversationList) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ConversationKit {
  var clientId: Swift.String { get }
  var config: ZendeskSDKConversationKit.Config { get }
  var featureFlagManager: ZendeskSDKCoreUtilities.FeatureFlagManager { get }
  var currentUser: ZendeskSDKConversationKit.User? { get }
  var hasActiveConversationInLatestTen: Swift.Bool { get }
  static var authenticationDelegate: (any ZendeskSDKConversationKit.AuthenticationDelegate)? { get set }
  func addEventObserver(_ observer: Swift.AnyObject, _ closure: @escaping (ZendeskSDKConversationKit.ConversationKitEvent) -> Swift.Void)
  func removeEventObserver(_ observer: Swift.AnyObject)
  func pause()
  func resume()
  func updatePushNotificationToken(_ token: Swift.String)
  func createAnonymousUser(with givenName: Swift.String?, surname: Swift.String?, proactiveMessageId: Swift.String?, result: ((Swift.Result<ZendeskSDKConversationKit.User, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  func createAnonymousUser(with givenName: Swift.String?, surname: Swift.String?, proactiveMessageId: Swift.String?) async throws -> ZendeskSDKConversationKit.User
  func getConversation(with identifier: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  func getConversation(with identifier: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  func getConversations(offset: Swift.Int, fromCache: Swift.Bool, result: ((Swift.Result<ZendeskSDKConversationKit.ConversationList, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  func getConversations(offset: Swift.Int, fromCache: Swift.Bool) async throws -> ZendeskSDKConversationKit.ConversationList
  func refreshConversation(with identifier: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  func refreshConversation(with identifier: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  func getMessages(before timestamp: Foundation.Date, conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  func getMessages(before timestamp: Foundation.Date, conversationId: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  func sendMessage(message: ZendeskSDKConversationKit.Message, conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Message, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  func sendMessage(message: ZendeskSDKConversationKit.Message, conversationId: Swift.String) async throws -> ZendeskSDKConversationKit.Message
  func sendPostbackAction(actionId: ZendeskSDKConversationKit.PostbackActionID, actionTitle: ZendeskSDKConversationKit.MessageActionTitle, conversationId: Swift.String, result: ((Swift.Result<Swift.Void, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  func sendPostbackAction(actionId: ZendeskSDKConversationKit.PostbackActionID, actionTitle: ZendeskSDKConversationKit.MessageActionTitle, conversationId: Swift.String) async throws
  func sendConversationActivity(activity: ZendeskSDKConversationKit.ActivityType, conversationId: Swift.String, result: ((Swift.Result<Swift.Void, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  func sendConversationActivity(activity: ZendeskSDKConversationKit.ActivityType, conversationId: Swift.String) async throws
  func loginUser(with jwt: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.User, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  func loginUser(with jwt: Swift.String) async throws -> ZendeskSDKConversationKit.User
  func logoutUser(result: ((Swift.Result<Swift.Void, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  func logoutUser() async throws
  func createConversation(proactiveMessageId: Swift.String?, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  func createConversation(proactiveMessageId: Swift.String?) async throws -> ZendeskSDKConversationKit.Conversation
  func getVisitType(result: ((Swift.Result<ZendeskSDKConversationKit.VisitType, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  func getVisitType() async throws -> ZendeskSDKConversationKit.VisitType
  func sendConversationReferral(proactiveMessageId: Swift.String, conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  func sendConversationReferral(proactiveMessageId: Swift.String, conversationId: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  func proactiveMessageStatusChanged(_ status: ZendeskSDKConversationKit.ProactiveMessageStatus, proactiveMessage: ZendeskSDKConversationKit.ProactiveMessage, jwt: Swift.String?)
  func setVisitType(_ visitType: ZendeskSDKConversationKit.VisitType)
  func clearProactiveMessages(proactiveMessageIds: [Swift.String])
  func setConversationFields(_ fields: [Swift.String : Swift.AnyHashable])
  func setConversationTags(_ tags: [Swift.String])
  func clearConversationFields()
  func clearConversationTags()
  func fetchWaitTimeForConversation(conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.WaitTimeData, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  func fetchWaitTimeForConversation(conversationId: Swift.String) -> Combine.AnyPublisher<ZendeskSDKConversationKit.WaitTimeData, ZendeskSDKConversationKit.ConversationKitError>
  func stopFetchingWaitTime()
  func updateUserConversations(_ conversations: [ZendeskSDKConversationKit.Conversation])
}
extension ZendeskSDKConversationKit.ConversationKit {
  public func createAnonymousUser(with givenName: Swift.String? = nil, surname: Swift.String? = nil, proactiveMessageId: Swift.String? = nil, result: ((Swift.Result<ZendeskSDKConversationKit.User, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  public func createAnonymousUser(with givenName: Swift.String?, surname: Swift.String?, proactiveMessageId: Swift.String? = nil) async throws -> ZendeskSDKConversationKit.User
  public func getConversation(with identifier: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  public func getConversation(with identifier: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  public func getConversations(offset: Swift.Int, fromCache: Swift.Bool = false, result: ((Swift.Result<ZendeskSDKConversationKit.ConversationList, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  public func getConversations(offset: Swift.Int, fromCache: Swift.Bool = false) async throws -> ZendeskSDKConversationKit.ConversationList
  public func refreshConversation(with identifier: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  public func refreshConversation(with identifier: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  public func getMessages(before timestamp: Foundation.Date, conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  public func getMessages(before timestamp: Foundation.Date, conversationId: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  public func sendMessage(message: ZendeskSDKConversationKit.Message, conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Message, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  public func sendMessage(message: ZendeskSDKConversationKit.Message, conversationId: Swift.String) async throws -> ZendeskSDKConversationKit.Message
  public func sendPostbackAction(actionId: ZendeskSDKConversationKit.PostbackActionID, conversationId: Swift.String, actionTitle: ZendeskSDKConversationKit.MessageActionTitle, result: ((Swift.Result<Swift.Void, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  public func sendPostbackAction(actionId: ZendeskSDKConversationKit.PostbackActionID, actionTitle: ZendeskSDKConversationKit.MessageActionTitle, conversationId: Swift.String) async throws
  public func sendConversationActivity(activity: ZendeskSDKConversationKit.ActivityType, conversationId: Swift.String, result: ((Swift.Result<Swift.Void, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  public func sendConversationActivity(activity: ZendeskSDKConversationKit.ActivityType, conversationId: Swift.String) async throws
  public func loginUser(with jwt: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.User, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  public func loginUser(with jwt: Swift.String) async throws -> ZendeskSDKConversationKit.User
  public func logoutUser(result: ((Swift.Result<Swift.Void, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  public func logoutUser() async throws
  public func createConversation(proactiveMessageId: Swift.String? = nil, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  public func createConversation(proactiveMessageId: Swift.String? = nil) async throws -> ZendeskSDKConversationKit.Conversation
  public func proactiveMessageStatusChanged(_ status: ZendeskSDKConversationKit.ProactiveMessageStatus, proactiveMessage: ZendeskSDKConversationKit.ProactiveMessage, jwt: Swift.String? = nil)
  public func clearProactiveMessages(proactiveMessageIds: [Swift.String])
  public func getVisitType(result: ((Swift.Result<ZendeskSDKConversationKit.VisitType, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  public func getVisitType() async throws -> ZendeskSDKConversationKit.VisitType
  public func sendConversationReferral(proactiveMessageId: Swift.String, conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  public func sendConversationReferral(proactiveMessageId: Swift.String, conversationId: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  public func setConversationFields(_ fields: [Swift.String : Swift.AnyHashable])
  public func setConversationTags(_ tags: [Swift.String])
  public func clearConversationFields()
  public func clearConversationTags()
  public func fetchWaitTimeForConversation(conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.WaitTimeData, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  public func fetchWaitTimeForConversation(conversationId: Swift.String) -> Combine.AnyPublisher<ZendeskSDKConversationKit.WaitTimeData, ZendeskSDKConversationKit.ConversationKitError>
  public func stopFetchingWaitTime()
}
public typealias MessageActionTitle = Swift.String
public protocol Content {
  var type: ZendeskSDKConversationKit.MessageType { get }
  var metadata: [Swift.String : Swift.AnyHashable]? { get }
}
public enum MessageContent : Swift.Equatable, Swift.Hashable {
  case text(ZendeskSDKConversationKit.TextMessageContent)
  case form(ZendeskSDKConversationKit.FormMessageContent)
  case formResponse(ZendeskSDKConversationKit.FormResponseMessageContent)
  case carousel(ZendeskSDKConversationKit.CarouselMessageContent)
  case image(ZendeskSDKConversationKit.ImageMessageContent)
  case file(ZendeskSDKConversationKit.FileMessageContent)
  case unsupported(ZendeskSDKConversationKit.UnsupportedMessageContent)
  public static func == (a: ZendeskSDKConversationKit.MessageContent, b: ZendeskSDKConversationKit.MessageContent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ZendeskSDKConversationKit.MessageContent : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ConversationKitError : Foundation.LocalizedError, Foundation.CustomNSError, Swift.Equatable {
  case mappingError
  case incorrectAccessLevelForAction
  case httpError(description: Swift.String, httpError: ZendeskSDKHTTPClient.HTTPError)
  case userExists
  case failedToDecodeJWT
  case expiredJWT
  public static var errorDomain: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public static func == (a: ZendeskSDKConversationKit.ConversationKitError, b: ZendeskSDKConversationKit.ConversationKitError) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class WaitTimeData : Swift.Equatable {
  final public let queuePositionNumber: Foundation.NSNumber
  final public let lowestQueuePositionNumber: Foundation.NSNumber?
  final public let responseTime: ZendeskSDKConversationKit.ResponseTime?
  final public let isInitialRouting: Swift.Bool
  final public var lowestQueuePosition: Swift.Int? {
    get
  }
  final public var queuePosition: Swift.Int {
    get
  }
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.WaitTimeData, rhs: ZendeskSDKConversationKit.WaitTimeData) -> Swift.Bool
  @objc deinit
}
public class ProactiveMessage : Swift.Equatable {
  final public let id: Swift.String
  final public let title: Swift.String
  final public let body: Swift.String
  final public let campaignId: Swift.String
  final public let campaignVersion: Swift.Int
  public init(id: Swift.String, title: Swift.String, body: Swift.String, campaignId: Swift.String, campaignVersion: Swift.Int)
  public static func == (lhs: ZendeskSDKConversationKit.ProactiveMessage, rhs: ZendeskSDKConversationKit.ProactiveMessage) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MessageActionItem : Swift.Codable, Swift.Equatable, Swift.Hashable {
  final public var title: Swift.String
  final public var itemDescription: Swift.String
  final public var mediaURL: Swift.String
  final public var attachmentId: Swift.String?
  final public var mediaType: Swift.String
  final public var messageActions: [any ZendeskSDKConversationKit.MessageAction] {
    get
  }
  final public let size: ZendeskSDKConversationKit.ActionItemSize
  final public let actions: [ZendeskSDKConversationKit.MessageActionModel]
  public init(title: Swift.String, itemDescription: Swift.String, mediaURL: Swift.String, attachmentId: Swift.String? = nil, size: ZendeskSDKConversationKit.ActionItemSize, mediaType: Swift.String, actions: [ZendeskSDKConversationKit.MessageActionModel])
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.MessageActionItem, rhs: ZendeskSDKConversationKit.MessageActionItem) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum ActionItemSize : Swift.Codable {
  case large
  case compact
  case none
  public static func == (a: ZendeskSDKConversationKit.ActionItemSize, b: ZendeskSDKConversationKit.ActionItemSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SettingsParameters : Swift.Equatable {
  public let config: ZendeskSDKConversationKit.Config
  public init(config: ZendeskSDKConversationKit.Config, featureFlagManager: ZendeskSDKCoreUtilities.FeatureFlagManager)
  public static func == (lhs: ZendeskSDKConversationKit.SettingsParameters, rhs: ZendeskSDKConversationKit.SettingsParameters) -> Swift.Bool
}
public enum AuthorType : Swift.Int, Swift.Codable, Swift.Equatable {
  case user
  case business
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class User : Swift.Codable, Swift.Equatable {
  final public let id: Swift.String
  final public let givenName: Swift.String
  final public let surname: Swift.String
  final public let locale: Swift.String
  final public let externalId: Swift.String
  final public let conversations: [ZendeskSDKConversationKit.Conversation]
  final public let realtimeSettings: ZendeskSDKConversationKit.RealtimeSettings
  final public let authentication: ZendeskSDKConversationKit.Authentication
  public static func == (lhs: ZendeskSDKConversationKit.User, rhs: ZendeskSDKConversationKit.User) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension ZendeskSDKConversationKit.User {
  final public var isLatestConversationActive: Swift.Bool {
    get
  }
  final public func getJWT() -> Swift.String?
  final public func getAuthorizationHeaderValue() -> Swift.String
}
final public class ImageMessageContent : Swift.Codable, ZendeskSDKConversationKit.Content, Swift.Equatable, Swift.Hashable {
  final public var type: ZendeskSDKConversationKit.MessageType {
    get
  }
  final public let mediaURL: Swift.String
  final public let attachmentId: Swift.String?
  final public let text: Swift.String
  final public let htmlText: Swift.String?
  final public let actions: [ZendeskSDKConversationKit.MessageActionModel]?
  final public var messageActions: [any ZendeskSDKConversationKit.MessageAction]? {
    get
  }
  final public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  public init(mediaURL: Swift.String, attachmentId: Swift.String? = nil, text: Swift.String? = nil, htmlText: Swift.String? = nil, actions: [ZendeskSDKConversationKit.MessageActionModel]? = nil, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.ImageMessageContent, rhs: ZendeskSDKConversationKit.ImageMessageContent) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class Option : Swift.Codable, Swift.Equatable, Swift.Hashable {
  final public let label: Swift.String
  final public let name: Swift.String
  public init(label: Swift.String, name: Swift.String)
  public static func == (lhs: ZendeskSDKConversationKit.Option, rhs: ZendeskSDKConversationKit.Option) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class Participant : Swift.Codable, Swift.Equatable {
  final public let id: Swift.String
  final public let appUserId: Swift.String
  final public let unreadCount: Swift.Int
  final public let lastRead: Foundation.Date?
  public static func == (lhs: ZendeskSDKConversationKit.Participant, rhs: ZendeskSDKConversationKit.Participant) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ActivityType : Swift.Int, Swift.Codable {
  case conversationRead
  case typingStart
  case typingStop
  case conversationRoutingQueued
  case conversationRoutingAssigned
  case conversationRoutingCleared
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class Config {
  final public var appId: Swift.String
  final public var baseURL: Swift.String
  final public var settingsBaseURL: Swift.String
  final public let integrationId: Swift.String
  final public let restRetryPolicy: ZendeskSDKConversationKit.RestRetryPolicy
  final public let waitTimeConfig: ZendeskSDKConversationKit.WaitTimeConfig
  final public let region: ZendeskSDKConversationKit.Config.Region
  public enum Region : Swift.Int {
    case us
    case eu
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public init(appId: Swift.String, baseURL: Swift.String, settingsBaseURL: Swift.String, integrationId: Swift.String, region: ZendeskSDKConversationKit.Config.Region = .us, restRetryPolicy: ZendeskSDKConversationKit.RestRetryPolicy, waitTimeConfig: ZendeskSDKConversationKit.WaitTimeConfig)
  public static func == (lhs: ZendeskSDKConversationKit.Config, rhs: ZendeskSDKConversationKit.Config) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  @objc deinit
}
public enum ConversationRoutingStatus : Swift.Int, Swift.Codable {
  case queued
  case assigned
  case unknown
  public init?(stringValue: Swift.String)
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class WaitTimeConfig : Swift.Equatable, Swift.Hashable {
  final public let waitTimeEnabled: Swift.Bool
  final public let queuePositionEnabled: Swift.Bool
  final public let onlyDecreasingQueue: Swift.Bool
  final public let waitTimeOverride: Foundation.NSNumber?
  final public let queuePollingInterval: Swift.Int
  public init(waitTimeEnabled: Swift.Bool, queuePositionEnabled: Swift.Bool, onlyDecreasingQueue: Swift.Bool, waitTimeOverride: Foundation.NSNumber?, queuePollingInterval: Swift.Int)
  public static func == (lhs: ZendeskSDKConversationKit.WaitTimeConfig, rhs: ZendeskSDKConversationKit.WaitTimeConfig) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public enum MessageType : Swift.Int, Swift.Codable {
  case text
  case file
  case image
  case carousel
  case list
  case location
  case form
  case formResponse
  case unsupported
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ConversationKitEvent {
  case connectionStatusChanged(ZendeskSDKConversationKit.ConnectionStatus)
  case userUpdated(ZendeskSDKConversationKit.User)
  case userAccessRevoked(error: ZendeskSDKConversationKit.ConversationKitError)
  case conversationUpdated(ZendeskSDKConversationKit.Conversation)
  case activityReceived(activity: ZendeskSDKConversationKit.Activity, conversationId: Swift.String)
  case messageReceived(message: ZendeskSDKConversationKit.Message, conversationId: Swift.String)
  case messageUpdated(message: ZendeskSDKConversationKit.Message, conversationId: Swift.String)
  case sendMessageFailed(error: ZendeskSDKConversationKit.ConversationKitError)
  case pushTokenPrepared(Swift.String)
  case pushTokenUpdateResult(token: Swift.String, error: ZendeskSDKConversationKit.ConversationKitError?)
  case loginResult(result: Swift.Result<ZendeskSDKConversationKit.User, ZendeskSDKConversationKit.ConversationKitError>)
  case logoutResult(error: ZendeskSDKConversationKit.ConversationKitError?)
  case persistedUserRetrieved(ZendeskSDKConversationKit.User)
  case conversationStarted(conversation: ZendeskSDKConversationKit.Conversation)
  case conversationAdded(conversation: ZendeskSDKConversationKit.Conversation)
  case conversationRemoved(conversationId: Swift.String)
  case proactiveMessageStatusChanged(status: ZendeskSDKConversationKit.ProactiveMessageStatus, proactiveMessage: ZendeskSDKConversationKit.ProactiveMessage)
  case openWebViewMessageReceived(url: Swift.String, size: ZendeskSDKConversationKit.WebViewActionSize, conversationId: Swift.String)
  case fetchWaitTimeDataResult(conversationId: Swift.String, result: Swift.Result<ZendeskSDKConversationKit.WaitTimeData, ZendeskSDKConversationKit.ConversationKitError>)
}
extension ZendeskSDKConversationKit.ConversationKitEvent : Swift.Equatable {
  public static func == (a: ZendeskSDKConversationKit.ConversationKitEvent, b: ZendeskSDKConversationKit.ConversationKitEvent) -> Swift.Bool
}
public enum FieldType : Swift.Int, Swift.Codable {
  case text
  case email
  case select
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class ResponseTime : Swift.Codable, Swift.Equatable, Swift.Hashable {
  final public var upper: Swift.Int?
  final public var lower: Swift.Int?
  final public var value: Swift.Double?
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.ResponseTime, rhs: ZendeskSDKConversationKit.ResponseTime) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class SelectFormField : Swift.Codable, ZendeskSDKConversationKit.Field, Swift.Equatable, Swift.Hashable {
  final public var type: ZendeskSDKConversationKit.FieldType {
    get
  }
  final public let id: Swift.String
  final public let name: Swift.String
  final public let label: Swift.String
  final public let placeholder: Swift.String?
  final public let select: [ZendeskSDKConversationKit.Option]?
  final public let selectSize: Swift.Int?
  final public let options: [ZendeskSDKConversationKit.Option]
  final public var value: Swift.String {
    get
  }
  public init(id: Swift.String, name: Swift.String, label: Swift.String, placeholder: Swift.String?, select: [ZendeskSDKConversationKit.Option]?, selectSize: Swift.Int?, options: [ZendeskSDKConversationKit.Option])
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.SelectFormField, rhs: ZendeskSDKConversationKit.SelectFormField) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol Field {
  var id: Swift.String { get }
  var type: ZendeskSDKConversationKit.FieldType { get }
  var name: Swift.String { get }
  var label: Swift.String { get }
  var value: Swift.String { get }
}
final public class Author : Swift.Codable, Swift.Equatable, Swift.Hashable {
  final public let id: Swift.String
  final public let type: ZendeskSDKConversationKit.AuthorType
  final public let displayName: Swift.String?
  final public var avatarURL: Swift.String?
  final public var subroles: [Swift.String]?
  public init(id: Swift.String, type: ZendeskSDKConversationKit.AuthorType, displayName: Swift.String? = nil, avatarURL: Swift.String? = nil, subroles: [Swift.String]? = nil)
  public static func == (lhs: ZendeskSDKConversationKit.Author, rhs: ZendeskSDKConversationKit.Author) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension ZendeskSDKConversationKit.Author {
  final public var description: Swift.String {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
}
final public class Activity : Swift.Codable, Swift.Equatable, Swift.Hashable {
  final public let id: Swift.String
  final public let type: ZendeskSDKConversationKit.ActivityType
  final public let authorType: ZendeskSDKConversationKit.AuthorType
  final public let name: Swift.String?
  final public let avatarURL: Swift.String?
  final public let appUserId: Swift.String?
  final public let lastRead: Foundation.Date?
  final public let isInitialRouting: Swift.Bool
  final public let queuePosition: Swift.Int?
  final public let lowestQueuePosition: Swift.Int?
  final public let responseTime: ZendeskSDKConversationKit.ResponseTime?
  final public let startAt: Swift.Int?
  public init(id: Swift.String = UUID().uuidString, type: ZendeskSDKConversationKit.ActivityType, authorType: ZendeskSDKConversationKit.AuthorType, name: Swift.String?, avatarURL: Swift.String?, appUserId: Swift.String? = nil, lastRead: Foundation.Date? = nil, isInitialRouting: Swift.Bool = false, queuePosition: Swift.Int? = nil, lowestQueuePosition: Swift.Int? = nil, responseTime: ZendeskSDKConversationKit.ResponseTime? = nil, startAt: Swift.Int? = nil)
  public static func == (lhs: ZendeskSDKConversationKit.Activity, rhs: ZendeskSDKConversationKit.Activity) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum ConnectionStatus : Swift.Int {
  case disconnected
  case connected
  case connectingRealtime
  case connectedRealtime
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol AuthenticationDelegate : AnyObject {
  func onInvalidAuth(_ completion: @escaping (Swift.String) -> Swift.Void)
}
final public class TextMessageContent : Swift.Codable, ZendeskSDKConversationKit.Content, Swift.Equatable, Swift.Hashable {
  final public var type: ZendeskSDKConversationKit.MessageType {
    get
  }
  final public let text: Swift.String
  final public let htmlText: Swift.String?
  final public let payload: Swift.String?
  final public let actions: [ZendeskSDKConversationKit.MessageActionModel]?
  final public var messageActions: [any ZendeskSDKConversationKit.MessageAction]? {
    get
  }
  final public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  public init(text: Swift.String, htmlText: Swift.String? = nil, payload: Swift.String? = nil, actions: [ZendeskSDKConversationKit.MessageActionModel]? = nil, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.TextMessageContent, rhs: ZendeskSDKConversationKit.TextMessageContent) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class WebViewAction : Swift.Codable, ZendeskSDKConversationKit.MessageAction, Swift.Equatable, Swift.Hashable {
  final public let id: Swift.String
  final public var type: ZendeskSDKConversationKit.ActionType {
    get
  }
  final public let text: Swift.String
  final public let uri: Swift.String
  final public let `default`: Swift.Bool
  final public let fallback: Swift.String
  final public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  final public let openOnReceive: Swift.Bool
  final public let size: ZendeskSDKConversationKit.WebViewActionSize
  public init(id: Swift.String, text: Swift.String, uri: Swift.String, default: Swift.Bool, fallback: Swift.String, metadata: [Swift.String : Swift.AnyHashable]? = nil, openOnReceive: Swift.Bool, size: ZendeskSDKConversationKit.WebViewActionSize)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.WebViewAction, rhs: ZendeskSDKConversationKit.WebViewAction) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum WebViewActionSize : Swift.Int, Swift.Codable, Swift.Equatable {
  case full
  case tall
  case compact
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class RestRetryPolicy : Swift.Equatable, Swift.Hashable {
  final public let regular: Swift.Int
  final public let aggressive: Swift.Int
  final public let timeUnit: Foundation.UnitDuration
  final public let backOffMultiplier: Swift.Int
  final public let maxRetries: Swift.Int
  public init(regular: Swift.Int, aggressive: Swift.Int, timeUnit: Foundation.UnitDuration, backOffMultiplier: Swift.Int, maxRetries: Swift.Int)
  public static func == (lhs: ZendeskSDKConversationKit.RestRetryPolicy, rhs: ZendeskSDKConversationKit.RestRetryPolicy) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
extension ZendeskSDKConversationKit.RestRetryPolicy {
  public static var `default`: ZendeskSDKConversationKit.RestRetryPolicy {
    get
  }
}
public enum VisitType : Swift.Int, Swift.Codable {
  case new
  case `repeat`
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class Message : Swift.Codable, Swift.Equatable, Swift.Hashable {
  final public let id: Swift.String
  final public let content: ZendeskSDKConversationKit.MessageContent
  final public var messageContent: any ZendeskSDKConversationKit.Content {
    get
  }
  final public var messageType: ZendeskSDKConversationKit.MessageType {
    get
  }
  final public let createdAt: Foundation.Date?
  final public let receivedAt: Foundation.Date?
  final public let status: ZendeskSDKConversationKit.MessageStatus
  final public let author: ZendeskSDKConversationKit.Author
  final public let sourceId: Swift.String?
  final public let localId: Swift.String
  final public var timestamp: Foundation.Date {
    get
  }
  final public var actions: [ZendeskSDKConversationKit.MessageActionModel]? {
    get
  }
  final public var messageActions: [any ZendeskSDKConversationKit.MessageAction]? {
    get
  }
  public init(id: Swift.String = UUID().uuidString, content: ZendeskSDKConversationKit.MessageContent, createdAt: Foundation.Date? = Date(), receivedAt: Foundation.Date? = nil, status: ZendeskSDKConversationKit.MessageStatus = .pending, author: ZendeskSDKConversationKit.Author = .init(id: UUID().uuidString, type: .user), sourceId: Swift.String? = nil, localId: Swift.String? = nil)
  convenience public init(text: Swift.String, payload: Swift.String? = nil, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  convenience public init?(mediaURL: Foundation.URL, text: Swift.String?, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  public static func == (lhs: ZendeskSDKConversationKit.Message, rhs: ZendeskSDKConversationKit.Message) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public var description: Swift.String {
    get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension ZendeskSDKConversationKit.Message {
  final public func isAuthoredBy(_ participant: ZendeskSDKConversationKit.Participant?) -> Swift.Bool
}
final public class FormMessageContent : Swift.Codable, ZendeskSDKConversationKit.Content, Swift.Equatable, Swift.Hashable {
  final public let id: Swift.String
  final public var type: ZendeskSDKConversationKit.MessageType {
    get
  }
  final public var fields: [any ZendeskSDKConversationKit.Field] {
    get
  }
  final public let blockChatInput: Swift.Bool
  final public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  final public let formFields: [ZendeskSDKConversationKit.FormField]
  public init(id: Swift.String, formFields: [ZendeskSDKConversationKit.FormField], blockChatInput: Swift.Bool, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.FormMessageContent, rhs: ZendeskSDKConversationKit.FormMessageContent) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct DefaultRESTClientBuilder {
  public static func resolveAuthorizationHeader(authentication: ZendeskSDKConversationKit.Authentication, userId: Swift.String) -> Swift.String?
}
public typealias PostbackActionID = Swift.String
public enum ConversationStatus : Swift.Int, Swift.Codable {
  case active
  case idle
  case unknown
  public init?(rawValue: Swift.String)
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol MessageAction {
  var id: Swift.String { get }
  var type: ZendeskSDKConversationKit.ActionType { get }
  var metadata: [Swift.String : Swift.AnyHashable]? { get }
}
public enum ActionType : Swift.Int, Swift.Codable {
  case buy
  case link
  case locationRequest
  case postback
  case reply
  case share
  case webview
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MessageActionModel : Swift.Equatable, Swift.Hashable {
  case buy(ZendeskSDKConversationKit.BuyAction)
  case link(ZendeskSDKConversationKit.LinkAction)
  case locationRequest(ZendeskSDKConversationKit.LocationRequestAction)
  case postback(ZendeskSDKConversationKit.PostbackAction)
  case reply(ZendeskSDKConversationKit.ReplyAction)
  case share(ZendeskSDKConversationKit.ShareAction)
  case webview(ZendeskSDKConversationKit.WebViewAction)
  public var text: Swift.String {
    get
  }
  public static func == (a: ZendeskSDKConversationKit.MessageActionModel, b: ZendeskSDKConversationKit.MessageActionModel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ZendeskSDKConversationKit.MessageActionModel : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension ZendeskSDKConversationKit.MessageActionModel {
  public var value: any ZendeskSDKConversationKit.MessageAction {
    get
  }
}
@_hasMissingDesignatedInitializers final public class ReplyAction : Swift.Codable, ZendeskSDKConversationKit.MessageAction, Swift.Equatable, Swift.Hashable {
  final public let id: Swift.String
  final public var type: ZendeskSDKConversationKit.ActionType {
    get
  }
  final public let text: Swift.String
  final public let payload: Swift.String
  final public let iconUrl: Swift.String?
  final public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  public init(id: Swift.String, text: Swift.String, metadata: [Swift.String : Swift.AnyHashable]? = nil, payload: Swift.String, iconUrl: Swift.String?)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.ReplyAction, rhs: ZendeskSDKConversationKit.ReplyAction) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
final public class EmailFormField : Swift.Codable, ZendeskSDKConversationKit.Field, Swift.Equatable, Swift.Hashable {
  final public var type: ZendeskSDKConversationKit.FieldType {
    get
  }
  final public let id: Swift.String
  final public let email: Swift.String
  final public let name: Swift.String
  final public let label: Swift.String
  final public let placeholder: Swift.String?
  final public var value: Swift.String {
    get
  }
  public init(id: Swift.String, email: Swift.String, name: Swift.String, label: Swift.String, placeholder: Swift.String?)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.EmailFormField, rhs: ZendeskSDKConversationKit.EmailFormField) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
final public class FileMessageContent : Swift.Codable, ZendeskSDKConversationKit.Content, Swift.Equatable, Swift.Hashable {
  final public var type: ZendeskSDKConversationKit.MessageType {
    get
  }
  final public let text: Swift.String
  final public let altText: Swift.String
  final public let mediaURL: Swift.String
  final public let attachmentId: Swift.String?
  final public let mediaType: Swift.String
  final public let mediaSize: Swift.Int64
  final public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  public init(text: Swift.String, altText: Swift.String, mediaURL: Swift.String, attachmentId: Swift.String? = nil, mediaType: Swift.String, mediaSize: Swift.Int64, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.FileMessageContent, rhs: ZendeskSDKConversationKit.FileMessageContent) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum MessageStatus : Swift.Int, Swift.Codable {
  case pending
  case sent
  case failed
  case exceedsMaxFileSize
  case failedAttachmentNotSupported
  public var isFailed: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class ShareAction : Swift.Codable, ZendeskSDKConversationKit.MessageAction, Swift.Equatable, Swift.Hashable {
  final public let id: Swift.String
  final public var type: ZendeskSDKConversationKit.ActionType {
    get
  }
  final public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  public init(id: Swift.String, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.ShareAction, rhs: ZendeskSDKConversationKit.ShareAction) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class BuyAction : Swift.Codable, ZendeskSDKConversationKit.MessageAction, Swift.Equatable, Swift.Hashable {
  final public let id: Swift.String
  final public var type: ZendeskSDKConversationKit.ActionType {
    get
  }
  final public let text: Swift.String
  final public let uri: Swift.String
  final public let `default`: Swift.Bool
  final public let amount: Swift.Double
  final public let currency: Swift.String
  final public let state: ZendeskSDKConversationKit.MessageActionBuyState
  final public var metadata: [Swift.String : Swift.AnyHashable]? {
    get
  }
  public init(id: Swift.String, text: Swift.String, uri: Swift.String, default: Swift.Bool, amount: Swift.Double, currency: Swift.String, state: ZendeskSDKConversationKit.MessageActionBuyState, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.BuyAction, rhs: ZendeskSDKConversationKit.BuyAction) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum MessageActionBuyState : Swift.Int, Swift.Codable {
  case offered
  case paid
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class TextFormField : Swift.Codable, ZendeskSDKConversationKit.Field, Swift.Equatable, Swift.Hashable {
  final public var type: ZendeskSDKConversationKit.FieldType {
    get
  }
  final public let id: Swift.String
  final public let text: Swift.String
  final public let name: Swift.String
  final public let label: Swift.String
  final public let placeholder: Swift.String?
  final public let minSize: Swift.Int?
  final public let maxSize: Swift.Int?
  final public var value: Swift.String {
    get
  }
  public init(id: Swift.String, text: Swift.String, name: Swift.String, label: Swift.String, placeholder: Swift.String?, minSize: Swift.Int?, maxSize: Swift.Int?)
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: ZendeskSDKConversationKit.TextFormField, rhs: ZendeskSDKConversationKit.TextFormField) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  final public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class Authentication : Swift.Codable, Swift.Equatable {
  final public var type: ZendeskSDKConversationKit.AuthenticationType
  final public var token: Swift.String?
  public static func == (lhs: ZendeskSDKConversationKit.Authentication, rhs: ZendeskSDKConversationKit.Authentication) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum AuthenticationType : Swift.Int, Swift.Codable {
  case sessionToken
  case jwt
  case unauthenticated
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension ZendeskSDKConversationKit.ConversationType : Swift.Equatable {}
extension ZendeskSDKConversationKit.ConversationType : Swift.Hashable {}
extension ZendeskSDKConversationKit.ConversationType : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.Subrole : Swift.Equatable {}
extension ZendeskSDKConversationKit.Subrole : Swift.Hashable {}
extension ZendeskSDKConversationKit.Subrole : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.ProactiveMessageStatus : Swift.Equatable {}
extension ZendeskSDKConversationKit.ProactiveMessageStatus : Swift.Hashable {}
extension ZendeskSDKConversationKit.ProactiveMessageStatus : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.ActionItemSize : Swift.Equatable {}
extension ZendeskSDKConversationKit.ActionItemSize : Swift.Hashable {}
extension ZendeskSDKConversationKit.AuthorType : Swift.Hashable {}
extension ZendeskSDKConversationKit.AuthorType : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.ActivityType : Swift.Equatable {}
extension ZendeskSDKConversationKit.ActivityType : Swift.Hashable {}
extension ZendeskSDKConversationKit.ActivityType : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.Config.Region : Swift.Equatable {}
extension ZendeskSDKConversationKit.Config.Region : Swift.Hashable {}
extension ZendeskSDKConversationKit.Config.Region : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.ConversationRoutingStatus : Swift.Equatable {}
extension ZendeskSDKConversationKit.ConversationRoutingStatus : Swift.Hashable {}
extension ZendeskSDKConversationKit.ConversationRoutingStatus : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.MessageType : Swift.Equatable {}
extension ZendeskSDKConversationKit.MessageType : Swift.Hashable {}
extension ZendeskSDKConversationKit.MessageType : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.FieldType : Swift.Equatable {}
extension ZendeskSDKConversationKit.FieldType : Swift.Hashable {}
extension ZendeskSDKConversationKit.FieldType : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.ConnectionStatus : Swift.Equatable {}
extension ZendeskSDKConversationKit.ConnectionStatus : Swift.Hashable {}
extension ZendeskSDKConversationKit.ConnectionStatus : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.WebViewActionSize : Swift.Hashable {}
extension ZendeskSDKConversationKit.WebViewActionSize : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.VisitType : Swift.Equatable {}
extension ZendeskSDKConversationKit.VisitType : Swift.Hashable {}
extension ZendeskSDKConversationKit.VisitType : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.ConversationStatus : Swift.Equatable {}
extension ZendeskSDKConversationKit.ConversationStatus : Swift.Hashable {}
extension ZendeskSDKConversationKit.ConversationStatus : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.ActionType : Swift.Equatable {}
extension ZendeskSDKConversationKit.ActionType : Swift.Hashable {}
extension ZendeskSDKConversationKit.ActionType : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.MessageStatus : Swift.Equatable {}
extension ZendeskSDKConversationKit.MessageStatus : Swift.Hashable {}
extension ZendeskSDKConversationKit.MessageStatus : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.MessageActionBuyState : Swift.Equatable {}
extension ZendeskSDKConversationKit.MessageActionBuyState : Swift.Hashable {}
extension ZendeskSDKConversationKit.MessageActionBuyState : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.AuthenticationType : Swift.Equatable {}
extension ZendeskSDKConversationKit.AuthenticationType : Swift.Hashable {}
extension ZendeskSDKConversationKit.AuthenticationType : Swift.RawRepresentable {}
