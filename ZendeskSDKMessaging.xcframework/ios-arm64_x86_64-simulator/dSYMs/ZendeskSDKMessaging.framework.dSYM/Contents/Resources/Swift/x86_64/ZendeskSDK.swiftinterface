// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ZendeskSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreTelephony
import Foundation
import Swift
import SwiftUI
import UIKit
@_exported import ZendeskSDK
import ZendeskSDKConversationKit
import ZendeskSDKCoreUtilities
import ZendeskSDKHTTPClient
import ZendeskSDKLogger
import ZendeskSDKStorage
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 13.0.0, *)
extension ZendeskSDK.Zendesk {
  final public class func initialize(withChannelKey channelKey: Swift.String, messagingFactory: (any ZendeskSDK.MessagingFactory)? = nil) async throws -> ZendeskSDK.Zendesk
  final public func sendPageViewEvent(_ pageView: ZendeskSDK.PageView) async throws
  final public func loginUser(with jwt: Swift.String) async throws -> ZendeskSDK.ZendeskUser
  final public func logoutUser() async throws
}
public enum InitializationPhase {
  case notProcessing, processing
  public static func == (a: ZendeskSDK.InitializationPhase, b: ZendeskSDK.InitializationPhase) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ZendeskEvent {
  @available(*, deprecated, message: "Use `сonversationUnreadCountChanged` instead.")
  case unreadMessageCountChanged(currentUnreadCount: Swift.Int)
  case сonversationUnreadCountChanged(id: Foundation.UUID, timestamp: Foundation.Date, data: ZendeskSDK.ConversationUnreadCountChange)
  case authenticationFailed(error: any Swift.Error)
  case conversationAdded(conversationId: Swift.String)
  case connectionStatusChanged(connectionStatus: ZendeskSDK.ZendeskConnectionStatus)
  case sendMessageFailed(error: any Swift.Error)
  case conversationOpened(id: Foundation.UUID, timestamp: Foundation.Date, conversationId: Swift.String?)
  case conversationStarted(id: Foundation.UUID, timestamp: Foundation.Date, conversationId: Swift.String)
  case messagesShown(id: Foundation.UUID, timestamp: Foundation.Date, conversationId: Swift.String, messages: [ZendeskSDK.ZendeskMessage])
}
@objc public enum ZDKZendeskEvent : Swift.Int {
  @available(*, deprecated, message: "Use `сonversationUnreadMessageCountChanged` instead.")
  case unreadMessageCountChanged
  case сonversationUnreadMessageCountChanged
  case authenticationFailed
  case conversationAdded
  case connectionStatusChanged
  case sendMessageFailed
  case conversationOpened
  case conversationStarted
  case messagesShown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension ZendeskSDK.ZendeskEvent : Swift.Equatable {
  public static func == (lhs: ZendeskSDK.ZendeskEvent, rhs: ZendeskSDK.ZendeskEvent) -> Swift.Bool
}
@objc(ZDKConversationUnreadCountChanged) final public class ConversationUnreadCountChange : ObjectiveC.NSObject {
  @objc final public let totalUnreadMessagesCount: Swift.Int
  @objc final public let conversationId: Swift.String?
  @objc final public let unreadCountInConversation: Swift.Int
  public init(totalUnreadMessagesCount: Swift.Int, conversationId: Swift.String?, unreadCountInConversation: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class ZDKConversationOpened : ObjectiveC.NSObject {
  @objc final public let id: Foundation.UUID
  @objc final public let timestamp: Foundation.Date
  @objc final public let conversationId: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class ZDKConversationStarted : ObjectiveC.NSObject {
  @objc final public let id: Foundation.UUID
  @objc final public let timestamp: Foundation.Date
  @objc final public let conversationId: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class ZDKMessagesShown : ObjectiveC.NSObject {
  @objc final public let id: Foundation.UUID
  @objc final public let timestamp: Foundation.Date
  @objc final public let conversationId: Swift.String
  @objc final public let messages: [ZendeskSDK.ZendeskMessage]
  @objc deinit
}
@objc public protocol MessagingFactory {
  @objc func createMessaging(with parameters: ZendeskSDK.MessagingFactoryParameters) -> ZendeskSDK.Messaging
}
public struct ColorTheme : Swift.Equatable, Swift.Hashable {
  public let primaryColor: UIKit.UIColor
  public let messageColor: UIKit.UIColor
  public let actionColor: UIKit.UIColor
  public let notifyColor: UIKit.UIColor
  public let inboundMessageColor: UIKit.UIColor?
  public let systemMessageColor: UIKit.UIColor?
  public let backgroundColor: UIKit.UIColor?
  public let elevatedColor: UIKit.UIColor?
  public let onPrimaryColor: UIKit.UIColor?
  public let onActionColor: UIKit.UIColor?
  public let onMessageColor: UIKit.UIColor?
  public let onBackgroundColor: UIKit.UIColor?
  public let successColor: UIKit.UIColor?
  public let dangerColor: UIKit.UIColor?
  public let onDangerColor: UIKit.UIColor?
  public let disabledColor: UIKit.UIColor?
  public let iconColor: UIKit.UIColor?
  public let actionBackgroundColor: UIKit.UIColor?
  public let onActionBackgroundColor: UIKit.UIColor?
  public static func == (a: ZendeskSDK.ColorTheme, b: ZendeskSDK.ColorTheme) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class MessagingSwiftUI {
  public init()
  open func messagingView() -> SwiftUICore.AnyView
  open func getUnreadMessageCount() -> Swift.Int
  open func setConversationFields(_ fields: [Swift.String : Swift.AnyHashable])
  open func setConversationTags(_ tags: [Swift.String])
  open func clearConversationFields()
  open func clearConversationTags()
  weak public static var delegate: (any ZendeskSDK.MessagingSwiftUIDelegate)?
  @objc deinit
}
@objc(ZDKMessagingDelegate) public protocol MessagingDelegate {
  @objc func messaging(_ messaging: ZendeskSDK.Messaging, shouldHandleURL url: Foundation.URL, from source: ZendeskSDK.URLSource) -> Swift.Bool
}
extension ZendeskSDK.MessagingDelegate {
  public func messaging(_ messaging: ZendeskSDK.Messaging, shouldHandleURL url: Foundation.URL, from source: ZendeskSDK.URLSource) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc(ZDKMessagingFactoryParameters) final public class MessagingFactoryParameters : ObjectiveC.NSObject {
  final public let messagingSettings: ZendeskSDK.MessagingSettings
  final public let conversationKit: any ZendeskSDKConversationKit.ConversationKit
  final public let theme: ZendeskSDK.ColorTheme
  final public let dispatchEvent: ZendeskSDK.DispatchEvent
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(ZDKMessagingSettings) final public class MessagingSettings : ObjectiveC.NSObject {
  final public let identifier: Swift.String
  final public let integrationId: Swift.String
  final public let enabled: Swift.Bool
  final public let settingsURL: Swift.String
  final public let brand: Swift.String?
  final public let title: Swift.String
  final public let accountDescription: Swift.String?
  final public let logoURL: Swift.String?
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension ZendeskSDK.MessagingSettings {
  final public var baseURL: Swift.String {
    get
  }
}
@objc(ZDKZendeskMessage) final public class ZendeskMessage : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  @objc final public let role: ZendeskSDK.ZendeskRole
  @objc final public let timestamp: Foundation.Date
  @objc public init(id: Swift.String, role: ZendeskSDK.ZendeskRole, timestamp: Foundation.Date)
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol MessagingSwiftUIDelegate : AnyObject {
  func messaging(_ messaging: ZendeskSDK.MessagingSwiftUI, shouldHandleURL url: Foundation.URL, from source: ZendeskSDK.URLSource) -> Swift.Bool
}
extension ZendeskSDK.MessagingSwiftUIDelegate {
  public func messaging(_ messaging: ZendeskSDK.MessagingSwiftUI, shouldHandleURL url: Foundation.URL, from source: ZendeskSDK.URLSource) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc final public class Zendesk : ObjectiveC.NSObject {
  @objc final public var messaging: ZendeskSDK.Messaging? {
    @objc get
  }
  @objc public static var instance: ZendeskSDK.Zendesk? {
    @objc get
  }
  public static var initializationPhase: ZendeskSDK.InitializationPhase {
    get
  }
  weak public static var authenticationDelegate: (any ZendeskSDKConversationKit.AuthenticationDelegate)? {
    get
    set
  }
  final public class func initialize(withChannelKey channelKey: Swift.String, messagingFactory: (any ZendeskSDK.MessagingFactory)? = nil, completionHandler: @escaping (Swift.Result<ZendeskSDK.Zendesk, any Swift.Error>) -> Swift.Void)
  final public func sendPageViewEvent(_ pageView: ZendeskSDK.PageView, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "Use invalidate(_ :) instead. This function will be removed in a future Zendesk version.")
  @available(swift, obsoleted: 1.0)
  @objc public static func invalidate()
  public static func invalidate(_ clearStorage: Swift.Bool = false)
  @available(swift, obsoleted: 1.0)
  @objc public static func invalidate(clearStorage: Swift.Bool)
  final public func addEventObserver(_ observer: Swift.AnyObject, _ completionHandler: @escaping (ZendeskSDK.ZendeskEvent) -> Swift.Void)
  @objc final public func removeEventObserver(_ observer: Swift.AnyObject)
  final public func getCurrentUser() -> ZendeskSDK.ZendeskUser?
  @objc deinit
}
extension ZendeskSDK.Zendesk {
  final public func loginUser(with jwt: Swift.String, completionHandler: ((Swift.Result<ZendeskSDK.ZendeskUser, any Swift.Error>) -> Swift.Void)? = nil)
  final public func logoutUser(completionHandler: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? = nil)
  @available(swift, obsoleted: 1.0)
  @objc final public func loginUser(with jwt: Swift.String, completionHandler: ((ZendeskSDK.ZendeskUser?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @available(swift, obsoleted: 1.0)
  @objc final public func logoutUser(completionHandler: (((any Swift.Error)?) -> Swift.Void)? = nil)
}
extension ZendeskSDK.Zendesk {
  @available(swift, obsoleted: 1.0)
  @objc public static func initialize(channelKey: Swift.String, messagingFactory: (any ZendeskSDK.MessagingFactory)?, completionHandler: ((ZendeskSDK.Zendesk?, (any Swift.Error)?) -> Swift.Void)?)
  @available(swift, obsoleted: 1.0)
  @objc final public func addEventObserver(_ observer: Swift.AnyObject, _ completionHandler: ((ZendeskSDK.ZDKZendeskEvent, Swift.AnyObject?) -> Swift.Void)?)
  @available(swift, obsoleted: 1.0)
  @objc final public func sendPageViewEvent(_ pageView: ZendeskSDK.PageView, completionHandler: (((any Swift.Error)?) -> Swift.Void)?)
}
extension ZendeskSDK.Zendesk : ZendeskSDKLogger.Loggable {
  public static var logNamespace: Swift.String {
    get
  }
  public static var logCategory: Swift.String {
    get
  }
}
@objc(ZDKZendeskRole) public enum ZendeskRole : Swift.Int, Swift.Codable {
  case user
  case business
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(ZDKZendeskUser) final public class ZendeskUser : ObjectiveC.NSObject, Swift.Codable {
  final public let id: Swift.String
  final public let externalId: Swift.String
  final public let authenticationType: ZendeskSDKConversationKit.AuthenticationType
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(ZDKURLSource) public enum URLSource : Swift.Int, Swift.RawRepresentable {
  case text
  case carousel
  case file
  case image
  case linkMessageAction
  case webViewMessageAction
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(ZDKDispatchEvent) final public class DispatchEvent : ObjectiveC.NSObject {
  final public let event: (ZendeskSDK.ZendeskEvent) -> Swift.Void
  @objc deinit
}
@objc(ZDKZendeskConnectionStatus) public enum ZendeskConnectionStatus : Swift.Int {
  case disconnected = 0
  case connected = 1
  case connectingRealtime = 2
  case connectedRealtime = 3
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(ZDKMessaging) open class Messaging : ObjectiveC.NSObject {
  open func messagingViewController(_ messagingScreen: ZendeskSDK.MessagingScreen) -> UIKit.UIViewController
  @objc open func messagingViewController() -> UIKit.UIViewController
  @objc open func getUnreadMessageCount() -> Swift.Int
  @objc open func getUnreadMessageCount(conversationId: Swift.String) -> Swift.Int
  @objc open func setConversationFields(_ fields: [Swift.String : Swift.AnyHashable])
  @objc open func setConversationTags(_ tags: [Swift.String])
  @objc open func clearConversationFields()
  @objc open func clearConversationTags()
  @objc weak public static var delegate: (any ZendeskSDK.MessagingDelegate)?
  @objc override dynamic public init()
  @objc deinit
}
public enum MessagingScreen {
  case showConversationList
  case showMostRecentConversation(exitAction: ZendeskSDK.ExitAction)
  case showNewConversation(exitAction: ZendeskSDK.ExitAction)
  case showConversation(conversationId: Swift.String?, exitAction: ZendeskSDK.ExitAction)
}
public enum ExitAction {
  case close
  case returnToConversationList
  public static func == (a: ZendeskSDK.ExitAction, b: ZendeskSDK.ExitAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc(ZDKPageView) final public class PageView : ObjectiveC.NSObject {
  @objc public init(pageTitle: Swift.String, url: Swift.String)
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
public protocol MessagingSwiftUIFactory {
  func createMessaging(with parameters: ZendeskSDK.MessagingFactoryParameters) -> ZendeskSDK.MessagingSwiftUI
}
extension ZendeskSDK.InitializationPhase : Swift.Equatable {}
extension ZendeskSDK.InitializationPhase : Swift.Hashable {}
extension ZendeskSDK.ZDKZendeskEvent : Swift.Equatable {}
extension ZendeskSDK.ZDKZendeskEvent : Swift.Hashable {}
extension ZendeskSDK.ZDKZendeskEvent : Swift.RawRepresentable {}
extension ZendeskSDK.ZendeskRole : Swift.Equatable {}
extension ZendeskSDK.ZendeskRole : Swift.Hashable {}
extension ZendeskSDK.ZendeskRole : Swift.RawRepresentable {}
extension ZendeskSDK.URLSource : Swift.Equatable {}
extension ZendeskSDK.URLSource : Swift.Hashable {}
extension ZendeskSDK.ZendeskConnectionStatus : Swift.Equatable {}
extension ZendeskSDK.ZendeskConnectionStatus : Swift.Hashable {}
extension ZendeskSDK.ZendeskConnectionStatus : Swift.RawRepresentable {}
extension ZendeskSDK.ExitAction : Swift.Equatable {}
extension ZendeskSDK.ExitAction : Swift.Hashable {}
